(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{1059:function(e,a,s){e.exports=s.p+"assets/img/1-A.224ae5d9.png"},1060:function(e,a,s){e.exports=s.p+"assets/img/2-A.3c01bdcc.png"},1061:function(e,a,s){e.exports=s.p+"assets/img/3-A.931f9298.png"},1062:function(e,a,s){e.exports=s.p+"assets/img/4-A.b08899b7.png"},1063:function(e,a,s){e.exports=s.p+"assets/img/5-A.09a73e98.png"},1064:function(e,a,s){e.exports=s.p+"assets/img/6-A.81173367.png"},1065:function(e,a,s){e.exports=s.p+"assets/img/7-A.f7554f43.png"},1066:function(e,a,s){e.exports=s.p+"assets/img/8-A.fc21e3e6.png"},1067:function(e,a,s){e.exports=s.p+"assets/img/9-A.2348e32f.png"},1068:function(e,a,s){e.exports=s.p+"assets/img/10-A.2e7dbd44.png"},1069:function(e,a,s){e.exports=s.p+"assets/img/11-A.59f0e43e.png"},1070:function(e,a,s){e.exports=s.p+"assets/img/12-A.b122a232.png"},1071:function(e,a,s){e.exports=s.p+"assets/img/1-B.ba39f76e.png"},1072:function(e,a,s){e.exports=s.p+"assets/img/2-B.48087fe9.png"},1073:function(e,a,s){e.exports=s.p+"assets/img/3-B.d94b893c.png"},1074:function(e,a,s){e.exports=s.p+"assets/img/4-B.1040fb59.png"},1075:function(e,a,s){e.exports=s.p+"assets/img/5-B.efb703b4.png"},1076:function(e,a,s){e.exports=s.p+"assets/img/6-B.7b4a9b95.png"},1077:function(e,a,s){e.exports=s.p+"assets/img/7-B.829906fd.png"},1078:function(e,a,s){e.exports=s.p+"assets/img/8-B.842ae5e0.png"},1079:function(e,a,s){e.exports=s.p+"assets/img/9-B.98a3916e.png"},1080:function(e,a,s){e.exports=s.p+"assets/img/10-B.87e3b573.png"},1081:function(e,a,s){e.exports=s.p+"assets/img/11-B.752eefad.png"},1082:function(e,a,s){e.exports=s.p+"assets/img/12-B.c91449d0.png"},1083:function(e,a,s){e.exports=s.p+"assets/img/13-B.9241a4b8.png"},1084:function(e,a,s){e.exports=s.p+"assets/img/1-C.9c05c679.png"},1085:function(e,a,s){e.exports=s.p+"assets/img/2-C.74e8c02f.png"},1086:function(e,a,s){e.exports=s.p+"assets/img/3-C.2b8a08af.png"},1087:function(e,a,s){e.exports=s.p+"assets/img/4-C.e88d46f3.png"},1088:function(e,a,s){e.exports=s.p+"assets/img/5-C.de157f5c.png"},1089:function(e,a,s){e.exports=s.p+"assets/img/6-C.d4039f57.png"},1090:function(e,a,s){e.exports=s.p+"assets/img/7-C.a08c8e47.png"},1091:function(e,a,s){e.exports=s.p+"assets/img/8-C.a41f9b49.png"},1092:function(e,a,s){e.exports=s.p+"assets/img/9-C.dbd4c94c.png"},1093:function(e,a,s){e.exports=s.p+"assets/img/10-C.423cdb74.png"},1094:function(e,a,s){e.exports=s.p+"assets/img/11-C.800ec3ef.png"},1095:function(e,a,s){e.exports=s.p+"assets/img/12-C.0102f70c.png"},1096:function(e,a,s){e.exports=s.p+"assets/img/13-C.16f04679.png"},1097:function(e,a,s){e.exports=s.p+"assets/img/1-C-android.477a742b.png"},1098:function(e,a,s){e.exports=s.p+"assets/img/2-C-android.170146b7.png"},1099:function(e,a,s){e.exports=s.p+"assets/img/3-C-android.c1f07189.png"},1100:function(e,a,s){e.exports=s.p+"assets/img/1-D.42f7400c.png"},1101:function(e,a,s){e.exports=s.p+"assets/img/2-D.b861ed88.png"},1102:function(e,a,s){e.exports=s.p+"assets/img/3-D.900bbbb1.png"},1103:function(e,a,s){e.exports=s.p+"assets/img/4-D.a66406f9.png"},1104:function(e,a,s){e.exports=s.p+"assets/img/5-D.eab3516b.png"},1105:function(e,a,s){e.exports=s.p+"assets/img/6-D.0f52d8f8.png"},1157:function(e,a,s){"use strict";s.r(a);var n=s(1),r=Object(n.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"vpn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vpn"}},[e._v("#")]),e._v(" VPN")]),e._v(" "),a("h2",{attrs:{id:"a-vpn-de-acceso-remoto-con-openvpn-y-certificados-x509-5-puntos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-vpn-de-acceso-remoto-con-openvpn-y-certificados-x509-5-puntos"}},[e._v("#")]),e._v(" A) VPN de acceso remoto con OpenVPN y certificados x509 (5 puntos)")]),e._v(" "),a("p",[a("strong",[e._v("Configura una conexión VPN de acceso remoto entre dos equipos del cloud:")])]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Uno de los dos equipos (el que actuará como servidor) estará conectado a dos redes")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Para la autenticación de los extremos se usarán obligatoriamente certificados digitales, que se generarán utilizando openssl y se almacenarán en el directorio /etc/openvpn, junto con  los parámetros Diffie-Helman y el certificado de la propia Autoridad de Certificación.")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Se utilizarán direcciones de la red 10.99.99.0/24 para las direcciones virtuales de la VPN. La dirección 10.99.99.1 se asignará al servidor VPN.")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Los ficheros de configuración del servidor y del cliente se crearán en el directorio /etc/openvpn de cada máquina, y se llamarán servidor.conf y cliente.conf respectivamente.")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Tras el establecimiento de la VPN, la máquina cliente debe ser capaz de acceder a una máquina que esté en la otra red a la que está conectado el servidor.")])])])]),e._v(" "),a("p",[a("strong",[e._v("Documenta el proceso detalladamente.")])]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Vamos a utilizar Vagrant para crear un escenario. He utilizado el siguiente Vagrantfile para lograrlo:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://pastebin.com/8SUMxXwY",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vagrantfile"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("En la máquina que está actuando como servidor, es necesario instalar OpenVPN y habilitar la característica de reenvío (forwarding).")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo apt install openvpn\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo nano /etc/sysctl.conf\n\nnet.ipv4.ip_forward=1\n")])])]),a("p",[e._v("A continuación, vamos a copiar la configuración de "),a("code",[e._v("/usr/share/easy-rsa")]),e._v(" a "),a("code",[e._v("/etc/openvpn")]),e._v(" para evitar que las actualizaciones del paquete sobreescriban los cambiOS que realicemos.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo cp -r /usr/share/easy-rsa /etc/openvpn\ncd /etc/openvpn/easy-rsa/\n")])])]),a("p",[e._v("Inicializamos el directorio PKI:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa init-pki\n")])])]),a("p",[a("img",{attrs:{src:s(1059),alt:"image"}})]),e._v(" "),a("p",[e._v("A continuación, vamos a crear el certificado de la Autoridad de Certificación (CA) y la clave para firmar los certificados de los clientes y del servidor.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa build-ca\n")])])]),a("p",[a("img",{attrs:{src:s(1060),alt:"image"}})]),e._v(" "),a("p",[e._v('He usado "usuarioroot" como frase de contraseña. Según lo indicado en la salida del comando, el certificado se ha generado en '),a("code",[e._v("/etc/openvpn/easy-rsa/pki/ca.crt")]),e._v(", mientras que la clave privada se encuentra en "),a("code",[e._v("/etc/openvpn/easy-rsa/pki/private/ca.key")]),e._v(".")]),e._v(" "),a("p",[e._v("Ahora, debemos generar los parámetros Diffie-Hellman, los cuales se utilizarán para el intercambio de claves durante el proceso de apretón de manos TLS entre el servidor OpenVPN y los clientes que se conecten.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa gen-dh\n")])])]),a("p",[a("img",{attrs:{src:s(1061),alt:"image"}})]),e._v(" "),a("p",[e._v("Como podemos ver, se ha generado en "),a("code",[e._v("/etc/openvpn/easy-rsa/pki/dh.pem")]),e._v(".")]),e._v(" "),a("p",[e._v("A continuación, crearemos el certificado y la clave privada del servidor OpenVPN.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa build-server-full server nopass\n")])])]),a("p",[a("img",{attrs:{src:s(1062),alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("“nopass” deshabilita el uso de la frase de paso.")])]),e._v(" "),a("p",[e._v("El certificado se ha almacenado en "),a("code",[e._v("/etc/openvpn/easy-rsa/pki/issued/server.crt")]),e._v(" y la clave privada se ha generado en "),a("code",[e._v("/etc/openvpn/easy-rsa/pki/private/server.key")]),e._v(".")]),e._v(" "),a("p",[e._v("Así como hicimos con el servidor, generaremos el certificado y la clave privada para el cliente de la VPN (que yo llamé Clientevpn1).")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa build-client-full Clientevpn1 nopass\n")])])]),a("p",[a("img",{attrs:{src:s(1063),alt:"image"}})]),e._v(" "),a("p",[e._v("El certificado se ha generado en "),a("code",[e._v("/etc/openvpn/easy-rsa/pki/issued/Clientevpn1.crt")]),e._v(" y la clave privada se ha generado en "),a("code",[e._v("/etc/openvpn/easy-rsa/pki/private/Clientevpn1.key")]),e._v(". Todos estos archivos se encuentran en el lado del servidor, pero para que la conexión sea efectiva, debemos transferir los archivos necesarios al cliente. Para ello, primero los agruparemos en una carpeta para tenerlos más organizados.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("mkdir /home/vagrant/Clientevpn1\nsudo cp -rp /etc/openvpn/easy-rsa/pki/{ca.crt,issued/Clientevpn1.crt,private/Clientevpn1.key} /home/vagrant/Clientevpn1\nsudo chown -R vagrant: /home/vagrant/Clientevpn1/\n")])])]),a("p",[e._v("Generamos una clave pública u privada para pasarnos la carpeta:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("ssh-keygen -t rsa\n")])])]),a("p",[e._v("Y nos pasamos la carpeta a la maquina cliente por scp:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("scp -i /home/vagrant/.ssh/id_rsa -r /home/vagrant/Clientevpn1/ vagrant@192.168.10.11:/home/vagrant\n")])])]),a("p",[a("img",{attrs:{src:s(1064),alt:"image"}})]),e._v(" "),a("p",[e._v("Ahora, en el lado del servidor, crearemos el archivo de configuración del túnel utilizando el archivo de ejemplo existente.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf /etc/openvpn/server/servidor.conf\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('sudo nano /etc/openvpn/server/servidor.conf\n\nport 1194\nproto udp\ndev tun\n\nca /etc/openvpn/easy-rsa/pki/ca.crt\ncert /etc/openvpn/easy-rsa/pki/issued/server.crt\nkey /etc/openvpn/easy-rsa/pki/private/server.key\ndh /etc/openvpn/easy-rsa/pki/dh.pem\n\ntopology subnet\n\nserver 10.99.99.0 255.255.255.0\nifconfig-pool-persist /var/log/openvpn/ipp.txt\n\npush "route 192.168.11.0 255.255.255.0"\n\nkeepalive 10 120\ncipher AES-256-CBC\npersist-key\npersist-tun\nstatus /var/log/openvpn/openvpn-status.log\nverb 3\nexplicit-exit-notify 1\n')])])]),a("p",[e._v("Una vez creado este fichero en el servidor, podemos activar y habilitar el servicio:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo systemctl enable --now openvpn-server@servidor\n")])])]),a("p",[e._v("Vemos el servicio activo:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo systemctl status openvpn-server@servidor\n")])])]),a("p",[a("img",{attrs:{src:s(1065),alt:"image"}})]),e._v(" "),a("p",[e._v("En el cliente que queremos que use la vpn (Clientevpn1), tenemos que instalar el paquete openvpn:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo apt install openvpn\n")])])]),a("p",[e._v("Movemos al lugar adecuado los ficheros que pasamos antes por scp:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo mv Clientevpn1/* /etc/openvpn/client/\n")])])]),a("p",[e._v("Y les cambiamos el propietario a root:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo chown root: /etc/openvpn/client/*\n")])])]),a("p",[e._v("Asimismo, procedimos de manera similar con el cliente, tomando la plantilla de configuración existente y alterándola para adaptarla a nuestras necesidades específicas.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/client/cliente.conf\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo nano /etc/openvpn/client/cliente.conf\n\nclient\ndev tun\nproto udp\n\nremote 192.168.10.10 1194\nresolv-retry infinite\nnobind\npersist-key\npersist-tun\n\nca /etc/openvpn/client/ca.crt\ncert /etc/openvpn/client/Clientevpn1.crt\nkey /etc/openvpn/client/Clientevpn1.key\n\nremote-cert-tls server\ncipher AES-256-CBC\nverb 3\n")])])]),a("p",[e._v("Habilitamos y empezamos el servicio:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo systemctl enable --now openvpn-client@cliente\n")])])]),a("p",[e._v("Y verificamos si el servicio está funcionando correctamente:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo systemctl status openvpn-client@cliente\n")])])]),a("p",[a("img",{attrs:{src:s(1066),alt:"image"}})]),e._v(" "),a("p",[e._v('Notamos que se han generado dos interfaces denominadas "tun0" en ambos, el servidor y el cliente, con la dirección IP especificada en el servidor.')]),e._v(" "),a("p",[a("em",[e._v("Servidorvpn")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1067),alt:"image"}})]),e._v(" "),a("p",[a("em",[e._v("Clientevpn1")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1068),alt:"image"}})]),e._v(" "),a("p",[e._v("En el caso del cliente interno (denominado Clientevpn2 por mi parte), solo es necesario modificar la ruta predeterminada para que apunte hacia el servidor.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("ip route del default\nip route add default via 192.168.11.10\n")])])]),a("p",[e._v("Pruebas de funcionamiento (todas hechas desde Clientevpn1):")]),e._v(" "),a("ul",[a("li",[e._v("Ping a Clientevpn2:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1069),alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("Traceroute a Clientevpn2:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1070),alt:"image"}})]),e._v(" "),a("p",[e._v("Tal como observamos, el cliente denominado Clientevpn1 (Clientevpn) es capaz de realizar un ping sin problemas hacia una máquina en la red remota, y al revisar el resultado del comando traceroute, podemos ver que transita a través del túnel para alcanzar su destino final.")]),e._v(" "),a("h2",{attrs:{id:"b-vpn-sitio-a-sitio-con-openvpn-y-certificados-x509-10-puntos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-vpn-sitio-a-sitio-con-openvpn-y-certificados-x509-10-puntos"}},[e._v("#")]),e._v(" B) VPN sitio a sitio con OpenVPN y certificados x509 (10 puntos)")]),e._v(" "),a("p",[a("strong",[e._v("Configura una conexión VPN sitio a sitio entre dos equipos del cloud:")])]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Cada equipo estará conectado a dos redes, una de ellas en común")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Para la autenticación de los extremos se usarán obligatoriamente certificados digitales, que se generarán utilizando openssl y se almacenarán en el directorio /etc/openvpn, junto con con los parámetros Diffie-Helman y el certificado de la propia Autoridad de Certificación.")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Se utilizarán direcciones de la red 10.99.99.0/24 para las direcciones virtuales de la VPN.")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Tras el establecimiento de la VPN, una máquina de cada red detrás de cada servidor VPN debe ser capaz de acceder a una máquina del otro extremo.")])])])]),e._v(" "),a("p",[a("strong",[e._v("Documenta el proceso detalladamente.")])]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Para ello vamos a crear un escenario usuando vagrant. Para ello he utilizado el siguiente Vagrantfile:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://pastebin.com/xrPNkVJt",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vagrantfile"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Tendremos el siguiente escenario:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v('En el escenario 1, hay una subred con direcciones IP en el rango 30.0.0.0/24. Dentro de esta subred habrá dos computadoras conectadas entre sí a través de una red privada. La computadora "Servidor1" tendrá acceso a Internet y será accesible desde "Servidor2", mientras que la computadora "Cliente1" solo podrá acceder a "Servidor1".')])]),e._v(" "),a("li",[a("p",[e._v('En el escenario 2, que utiliza la red 20.0.0.0/24, se encontrarán dos dispositivos: "Servidor2" que podrá ser accedido desde "Servidor" y "Cliente2" que solo estará conectado a "Servidor2".')])])]),e._v(" "),a("p",[a("em",[a("strong",[e._v("Configuración en el escenario 1 (servidor)")])])]),e._v(" "),a("p",[e._v('Para comenzar, deberemos crear un archivo denominado "vars" que obtendrá su contenido a partir de una plantilla existente en el mismo directorio. Este archivo almacenará la información necesaria para nuestra Autoridad Certificadora.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo apt install openvpn\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cd /usr/share/easy-rsa/\nsudo cp vars.example vars\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('sudo nano vars\n\nset_var EASYRSA_REQ_COUNTRY     "ES"\nset_var EASYRSA_REQ_PROVINCE    "Sevilla"\nset_var EASYRSA_REQ_CITY        "Dos Hermanas"\nset_var EASYRSA_REQ_ORG         "OLucas Corp"\nset_var EASYRSA_REQ_EMAIL       "oscarlucasleo124@gmail.com"\nset_var EASYRSA_REQ_OU          "Apartado B VPN"\n')])])]),a("p",[e._v("En este paso, crearemos una carpeta donde se guardarán todos los documentos relacionados con la Autoridad Certificadora, como los certificados, las claves y la base de datos.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa init-pki\n")])])]),a("p",[a("img",{attrs:{src:s(1071),alt:"image"}})]),e._v(" "),a("p",[e._v('Finalmente, antes de crear la Autoridad Certificadora, deberemos generar una clave "Diffie-Hellman":')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa gen-dh\n")])])]),a("p",[a("img",{attrs:{src:s(1072),alt:"image"}})]),e._v(" "),a("p",[e._v("Ahora podemos proceder a crear la Autoridad Certificadora en sí:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa build-ca\n")])])]),a("p",[a("img",{attrs:{src:s(1073),alt:"image"}})]),e._v(" "),a("p",[e._v("Nota: He usado como frase de paso “usuario”.")]),e._v(" "),a("p",[e._v('Ahora que nuestra Autoridad Certificadora está lista, deberemos proceder a crear y firmar el certificado que utilizará nuestro dispositivo "Servidor1":')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa gen-req server\n")])])]),a("p",[a("img",{attrs:{src:s(1074),alt:"image"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa sign-req server server\n")])])]),a("p",[a("img",{attrs:{src:s(1075),alt:"image"}})]),e._v(" "),a("p",[e._v('Ahora que hemos terminado de crear y firmar el certificado del servidor, procederemos a generar y firmar el certificado que utilizará el dispositivo "Servidor2" del escenario 2 para acceder a la VPN.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa gen-req vpn2\n")])])]),a("p",[a("img",{attrs:{src:s(1076),alt:"image"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ./easyrsa sign-req client vpn2\n")])])]),a("p",[a("img",{attrs:{src:s(1077),alt:"image"}})]),e._v(" "),a("p",[e._v("Vamos a necesitar copiar algunos archivos para que el servidor VPN funcione correctamente en la ruta "),a("code",[e._v("/etc/openvpn/server")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo cp pki/ca.crt /etc/openvpn/server/\nsudo cp pki/dh.pem /etc/openvpn/server/\nsudo cp pki/issued/server.crt /etc/openvpn/server/\nsudo cp pki/private/server.key /etc/openvpn/server/\n")])])]),a("p",[e._v('Necesitamos transferir los archivos necesarios para que la máquina "Servidor2" pueda conectarse a mi servidor VPN. Una forma de hacerlo es utilizando SCP, pero hay varias otras opciones disponibles.')]),e._v(" "),a("p",[e._v("Generamos una clave pública u privada para pasarnos la carpeta:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("ssh-keygen -t rsa\n")])])]),a("p",[e._v("Y nos pasamos la carpeta a la maquina cliente por scp:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo scp -i /home/vagrant/.ssh/id_rsa /etc/openvpn/server/ca.crt vagrant@192.168.121.182:/home/vagrant\nsudo scp -i /home/vagrant/.ssh/id_rsa /usr/share/easy-rsa/pki/issued/vpn2.crt vagrant@192.168.121.182:/home/vagrant\nsudo scp -i /home/vagrant/.ssh/id_rsa /usr/share/easy-rsa/pki/private/vpn2.key vagrant@192.168.121.182:/home/vagrant\n")])])]),a("p",[e._v("Actualmente, debemos generar el archivo de configuración para el servidor VPN, y para ello podemos utilizar una plantilla proporcionada por el paquete de OpenVPN.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf /etc/openvpn/server/servidor.conf\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo nano /etc/openvpn/server/servidor.conf\n\ndev tun\n\nifconfig 10.99.99.1 10.99.99.2\nroute 20.0.0.0 255.255.255.0\ntls-server \n\nca ca.crt\ncert server.crt  \nkey server.key \n\ndh dh.pem  \ncomp-lzo  \nkeepalive 10 120  \nlog /var/log/openvpn/server.log  \nverb 3   \naskpass passwd.txt \n")])])]),a("p",[e._v("Ahora podemos iniciar el servicio en el lado del servidor:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo systemctl start openvpn-server@servidor\n")])])]),a("p",[e._v("Vemos el servicio activo:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo systemctl status openvpn-server@servidor\n")])])]),a("p",[a("img",{attrs:{src:s(1078),alt:"image"}})]),e._v(" "),a("p",[e._v("No debemos olvidar el bit de forwarding en el servidor:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("echo 1 > sudo /proc/sys/net/ipv4/ip_forward\n")])])]),a("p",[e._v("También en el cliente del escenario 1 debemos cambiar la ruta por defecto:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ip r del default\nsudo ip r add default via 30.0.0.10\n")])])]),a("p",[e._v("Con esto hemos terminado en el lado del escenario 1.")]),e._v(" "),a("p",[a("em",[a("strong",[e._v("Configuración en el escenario 2 (cliente)")])])]),e._v(" "),a("p",[e._v("Instalamos openvpn")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo apt install openvpn\n")])])]),a("p",[e._v('En esta situación, debemos preparar la máquina "Servidor2" para que funcione como la otra punta del túnel VPN. El primer paso es trasladar los archivos que se enviaron desde el escenario 1 a la carpeta correspondiente.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo mv ca.crt /etc/openvpn/client/\nsudo mv vpn2.crt /etc/openvpn/client/\nsudo mv vpn2.key /etc/openvpn/client/\n")])])]),a("p",[e._v("En este momento, vamos a crear un archivo de configuración para esta máquina. Para hacerlo, disponemos de un modelo como guía, al igual que ocurrió en el paso anterior.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/client/cliente.conf\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo nano /etc/openvpn/client/cliente.conf\n\ndev tun  \n\nremote 192.168.121.102\nifconfig 10.99.99.2 10.99.99.1 \nroute 30.0.0.0 255.255.255.0\ntls-client \n\nca ca.crt\ncert vpn2.crt\nkey vpn2.key \n\ncomp-lzo  \nkeepalive 10 60 \nverb 3 \naskpass passwd2.txt \n")])])]),a("p",[e._v("Ahora iniciamos el servicio:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo systemctl start openvpn-client@cliente\n")])])]),a("p",[e._v("Vemos el servicio activo:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo systemctl status openvpn-client@cliente\n")])])]),a("p",[a("img",{attrs:{src:s(1079),alt:"image"}})]),e._v(" "),a("p",[e._v("También debemos activar el ip de forwarding en esta máquina:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("echo 1 > sudo /proc/sys/net/ipv4/ip_forward\n")])])]),a("p",[e._v("Al igual que antes, también debemos cambiar la ruta del cliente en este escenario:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ip r del default\nsudo ip r add default via 20.0.0.10\n")])])]),a("p",[e._v("Ya hemos terminado de configurar este escenario y podemos pasar a hacer las pruebas:")]),e._v(" "),a("ul",[a("li",[e._v("Las rutas del servidor del escenario 1:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1080),alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("Las rutas del servidor del escenario 2:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1081),alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("Desde el cliente del escenario 1:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1082),alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("Desde el cliente del escenario 2:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1083),alt:"image"}})]),e._v(" "),a("p",[e._v('Ambas computadoras clientes están conectadas entre sí y al utilizar el comando "traceroute" se puede ver que el tráfico entre ellas pasa a través de un túnel.')]),e._v(" "),a("h2",{attrs:{id:"c-vpn-de-acceso-remoto-con-wireguard-5-puntos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-vpn-de-acceso-remoto-con-wireguard-5-puntos"}},[e._v("#")]),e._v(" C) VPN de acceso remoto con WireGuard (5 puntos)")]),e._v(" "),a("p",[a("strong",[e._v("Monta una VPN de acceso remoto usando Wireguard. Intenta probarla con clientes Windows, Linux y Android o iOS. Documenta el proceso adecuadamente y compáralo con el del apartado A.")])]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Voy a establecer una conexión VPN de acceso remoto utilizando WireGuard, la cual será utilizada por tres dispositivos: una computadora con sistema operativo Debian 11, una computadora con Windows 10, y un dispositivo móvil con sistema operativo Android o iOS. El dispositivo que actuará como servidor será una maquina virtual, exceptuando la prueba del cliente de android o ios que será mi computadora principal, mientras que los dispositivos clientes serán máquinas virtuales, excepto el dispositivo móvil.")]),e._v(" "),a("p",[e._v("A conticuación el Vagrantfile de este escenario:")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://pastebin.com/DSu5CTa0",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vagrantfile"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("En el cliente interno solo cambiaremos la ruta por defecto:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ip r del default\nsudo ip r add default via 192.168.10.10\n")])])]),a("p",[a("em",[a("strong",[e._v("Servidor")])])]),e._v(" "),a("p",[e._v("Para empezar, vamos a configurar el servidor. Lo primero que haremos es instalar el paquete necesario.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("apt install wireguard\n")])])]),a("p",[e._v("Antes de continuar, debemos asegurarnos de haber habilitado el reenvío de paquetes en el servidor.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nano /etc/sysctl.conf\n\nnet.ipv4.ip_forward = 1\n")])])]),a("p",[e._v("Y guardamos los cambios")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sysctl -p\n")])])]),a("p",[e._v("A continuación, crearemos los archivos de configuración necesarios en la carpeta principal de WireGuard.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cd /etc/wireguard/\n")])])]),a("p",[e._v("A continuación, generaremos el par de claves necesarias utilizando el comando recomendado por la página oficial de Wireguard.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg genkey | tee serverprivatekey | wg pubkey > serverpublickey\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cat serverprivatekey \n\nEN5dqPbfGb8YLzrFbbpr0JgqOJ1lx1oY/05MoomU+m0=\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cat serverpublickey \n\nV6tMkGlJqkfZVG6zchnzmH1kHaCH0OMW3eMuNDZspSg=\n")])])]),a("p",[e._v("A continuación, crearemos el archivo de configuración que tendrá el mismo nombre de la interfaz a crear (wg0).")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nano wg0.conf\n\n# Server config\n[Interface]\nAddress = 10.99.99.1\nPrivateKey = EN5dqPbfGb8YLzrFbbpr0JgqOJ1lx1oY/05MoomU+m0=\nListenPort = 51820\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n")])])]),a("p",[e._v('En el archivo de configuración anterior, encontrará una sección llamada "Interface"(Interfaz) que incluye lo siguiente:')]),e._v(" "),a("ul",[a("li",[a("p",[a("em",[e._v("Address")]),e._v(": La dirección IP asignada al servidor (la dirección de la VPN).")])]),e._v(" "),a("li",[a("p",[a("em",[e._v("PrivateKey")]),e._v(": La clave privada generada en el servidor.")])]),e._v(" "),a("li",[a("p",[a("em",[e._v("ListenPort")]),e._v(": El puerto en el que WireGuard escuchará. No es obligatorio, pero es recomendable especialmente en el caso de trabajar con firewalls.")])]),e._v(" "),a("li",[a("p",[a("em",[e._v("PostUp / PostDown")]),e._v(": Reglas de iptables que se activarán y desactivarán al levantar la interfaz que hemos definido.")])])]),e._v(" "),a("p",[e._v("En este momento ya podemos activar la interfaz que hemos creado")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg-quick up wg0\n")])])]),a("p",[a("img",{attrs:{src:s(1084),alt:"image"}})]),e._v(" "),a("p",[e._v("Podemos ver que el servidor se encuentra activo:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg\n")])])]),a("p",[a("img",{attrs:{src:s(1085),alt:"image"}})]),e._v(" "),a("p",[e._v("También podemos ver que se ha creado la interfaz que hemos definido:")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1086),alt:"image"}})]),e._v(" "),a("p",[e._v("Hemos terminado con la configuración básica del servidor. A continuación configuraremos los clientes.")]),e._v(" "),a("h4",{attrs:{id:"cliente-linux-debian-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cliente-linux-debian-11"}},[e._v("#")]),e._v(" Cliente Linux (Debian 11)")]),e._v(" "),a("p",[e._v("Igual que hicimos con el servidor, necesitamos instalar WireGuard y generar el par de claves para los dispositivos clientes:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo apt install wireguard\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cd /etc/wireguard/\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg genkey | tee clientprivatekey | wg pubkey > clientpublickey\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cat clientprivatekey \n\ngCRT5AII1VH0lpZGESpNfEvD5xtfQddUp1Qdilxg9Ww=\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cat clientpublickey \n\nGjTH3fo/Z6KgryKoGxwxhyW98O+pfULTjxSMmlS9GxI=\n")])])]),a("p",[e._v("Igual que en el servidor, también crearemos un archivo de configuración con la siguiente información en los dispositivos clientes.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nano wg0.conf\n\n[Interface]\nAddress = 10.99.99.2\nPrivateKey = gCRT5AII1VH0lpZGESpNfEvD5xtfQddUp1Qdilxg9Ww=\nListenPort = 51820\nPostUp = ip route add 192.168.10.0/24 dev wg0\nPostDown = ip route del 192.168.10.0/24 dev wg0\n\n[Peer]\nPublicKey = V6tMkGlJqkfZVG6zchnzmH1kHaCH0OMW3eMuNDZspSg=\nAllowedIPs = 0.0.0.0/0\nEndpoint = 192.168.121.110:51820\n")])])]),a("p",[e._v('En el bloque "Interface"(Interfaz) en el dispositivo cliente es similar al del servidor, pero se ha agregado un bloque llamado "Peer"(Pares) que se replicará más tarde en el servidor, que contiene la siguiente información:')]),e._v(" "),a("ul",[a("li",[a("p",[a("em",[e._v("PublicKey")]),e._v(": La clave pública del servidor.")])]),e._v(" "),a("li",[a("p",[a("em",[e._v("PostUp")]),e._v(": Hemos agregado la ruta estática a la red interna a la que nos conectaremos.")])]),e._v(" "),a("li",[a("p",[a("em",[e._v("AllowedIPs")]),e._v(": Se especifica una lista de direcciones IP de las cuales los paquetes pueden ser recibidos sin ser descartados. Actúa como un firewall dentro de WireGuard.")])]),e._v(" "),a("li",[a("p",[a("em",[e._v("Endpoint")]),e._v(": La dirección IP del dispositivo que actúa como servidor en la conexión VPN de WireGuard.")])])]),e._v(" "),a("p",[e._v("Con esto ya podemos activar la interfaz que hemos configurado:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg-quick up wg0\n")])])]),a("p",[a("img",{attrs:{src:s(1087),alt:"image"}})]),e._v(" "),a("p",[e._v("También podemos ver la interfaz que hemos creado:")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1088),alt:"image"}})]),e._v(" "),a("p",[e._v('Con esto hemos terminado de configurar el cliente, pero para que funcione debemos agregar también el bloque "Peer"(Pares) en el lado del servidor (uno por cada cliente que conectemos). Por lo tanto, el archivo de configuración del servidor quedaría de la siguiente manera:')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nano wg0.conf\n\n# Server config\n[Interface]\nAddress = 10.99.99.1\nPrivateKey = EN5dqPbfGb8YLzrFbbpr0JgqOJ1lx1oY/05MoomU+m0=\nListenPort = 51820\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# Clients configs\n\n# Cliente Debian 11\n[Peer]\nPublickey = GjTH3fo/Z6KgryKoGxwxhyW98O+pfULTjxSMmlS9GxI=\nAllowedIPs = 10.99.99.2/32\nPersistentKeepAlive = 25\n")])])]),a("p",[e._v("En el bloque “Peer”(Pares) hemos incluido lo siguiente:")]),e._v(" "),a("ul",[a("li",[a("p",[a("em",[e._v("PublicKey")]),e._v(": La clave pública del cliente.")])]),e._v(" "),a("li",[a("p",[a("em",[e._v("PersistentKeepAlive")]),e._v(": Si no hay intercambio de paquetes entre las máquinas después de 25 segundos, se enviará un paquete para comprobar si la conexión sigue activa.")])])]),e._v(" "),a("p",[e._v("Con este bloque que hemos añadido, ya podemos reiniciar el servicio:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg-quick down wg0\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg-quick up wg0\n")])])]),a("p",[e._v("Podemos ver el servicio activado con el cliente conectado:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg\n")])])]),a("p",[a("img",{attrs:{src:s(1089),alt:"image"}})]),e._v(" "),a("p",[e._v("Con esto ya hemos terminado completamente con el lado del cliente Linux. Probemos si ha funcionado:")]),e._v(" "),a("ul",[a("li",[e._v("Ping y traceroute desde el cliente externo a la red interna:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1090),alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("Ping y traceroute desde el cliente interno a la interfaz del túnel en el cliente externo:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1091),alt:"image"}})]),e._v(" "),a("h4",{attrs:{id:"cliente-windows-windows-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cliente-windows-windows-10"}},[e._v("#")]),e._v(" Cliente Windows (Windows 10)")]),e._v(" "),a("p",[e._v("Para configurar el sistema en Windows, es necesario descargar una iso y abrirlo una vez instalado. Crearemos un túnel vacío, generando automáticamente las claves necesarias. El siguiente paso será completar el archivo de configuración con la información necesaria.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1092),alt:"image"}})]),e._v(" "),a("p",[e._v('Una vez hayamos completado la configuración en el lado del cliente Windows, debemos pasar al lado del servidor y agregar un nuevo bloque "Peer" similar al que agregamos en el cliente Linux.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nano /etc/wireguard/wg0.conf\n\n# Server config\n[Interface]\nAddress = 10.99.99.1\nPrivateKey = EN5dqPbfGb8YLzrFbbpr0JgqOJ1lx1oY/05MoomU+m0=\nListenPort = 51820\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# Clients configs\n\n# Cliente Debian 11\n[Peer]\nPublickey = GjTH3fo/Z6KgryKoGxwxhyW98O+pfULTjxSMmlS9GxI=\nAllowedIPs = 10.99.99.2/32\nPersistentKeepAlive = 25\n\n# Cliente Windows 10\n[Peer]\nPublickey = yLC/jJFdkg5wuzHGGZm6TdrTECfkurXDqhCaxXCRTFo=\nAllowedIPs = 10.99.99.3/32\nPersistentKeepAlive = 25\n")])])]),a("p",[e._v("Ahora que lo hemos hecho, podemos reiniciar el servicio en el servidor:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg-quick down wg0\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg-quick up wg0\n")])])]),a("p",[e._v("Una vez iniciado en el servidor, activamos el túnel en el cliente windows:")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1093),alt:"image"}})]),e._v(" "),a("p",[e._v("Podemos ver en el lado del servidor que se ha añadido un nuevo “Peer”:")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1094),alt:"image"}})]),e._v(" "),a("p",[e._v("Ahora hagamos las pruebas:")]),e._v(" "),a("ul",[a("li",[e._v("Ping y traceroute desde el cliente windows a la red interna:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1095),alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("Ping y traceroute desde el cliente interno a la interfaz del túnel en el cliente windows:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1096),alt:"image"}})]),e._v(" "),a("h4",{attrs:{id:"cliente-android-o-ios"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cliente-android-o-ios"}},[e._v("#")]),e._v(" Cliente Android o iOS")]),e._v(" "),a("p",[e._v("Para utilizar Wireguard en un dispositivo Android o iOS, es necesario descargar la aplicación desde la tienda de aplicaciones de Google Playstore o App Store.")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1097),alt:"image"}})]),e._v(" "),a("p",[e._v("Una vez en la aplicación, veremos que nos da tres opciones para crear el túnel:")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1098),alt:"image"}})]),e._v(" "),a("p",[e._v('Para usar Wireguard en Android o iOS, primero debes descargar la aplicación desde la Playstore o App Store. Una vez hecho esto, puedes generar el par de claves en el cliente y crear un archivo de configuración. Una forma fácil de importar la configuración en tu dispositivo móvil es utilizar la opción de "Crear desde código QR", para ello, puedes utilizar un paquete para convertir el archivo de configuración en un código QR que pueda ser escaneado por tu dispositivo móvil.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg genkey | tee clientprivatekey | wg pubkey > clientpublickey\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cat clientprivatekey\n\nSEVl3i3Oj2SKPyVP9V2dULxaNiRhbCFgfYhRA59MtVI=\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cat clientpublickey\n\nSnWqP6EjnlX6ecN6sjrs5ybdVeYK+jlhBJLc7tkJExs=\n")])])]),a("p",[e._v("Nos generamos el fichero de configuración tal y como hicimos con el cliente linux:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nano clientelinux.conf\n                                    \n[Interface]\nAddress = 10.99.99.4\nPrivateKey = SEVl3i3Oj2SKPyVP9V2dULxaNiRhbCFgfYhRA59MtVI=\nListenPort = 51820\n\n[Peer]\nPublickey = evAbFv7RnmD0tKU8eBT5AIc1NPc/Le3FWm2tFnKRfTE=\nAllowedIPs = 0.0.0.0/0\nEndpoint = 192.168.1.78:51820\n")])])]),a("p",[e._v("Ahora nos instalamos el paquete para convertir esta configuración en un código qr:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("apt install qrencode\n")])])]),a("p",[e._v("Y lo ejecutamos:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("qrencode -t ansiutf8 < clientelinux.conf \n")])])]),a("p",[a("img",{attrs:{src:s(1099),alt:"image"}})]),e._v(" "),a("p",[e._v("Ahora lo escaneamos con el móvil. Una vez escaneado podemos ver la configuración que ha importado:")]),e._v(" "),a("p",[e._v("image")]),e._v(" "),a("p",[e._v("Ya solo tenemos que añadir el nuevo bloque “Peer” a la configuración del servidor:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nano wg0.conf \n\n# Server config\n[Interface]\nAddress = 10.99.99.1\nPrivateKey = 4MdgspEZXa36HRzvG0PvTyshgzdQgX/cZKEm0fipkFY=\nListenPort = 51820\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o wlp2s0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o wlp2s0 -j MASQUERADE\n\n# Clients configs\n\n# Cliente Android\n[Peer]\nPublickey = R4+mPQdkslRgRTGOME1mDkb8Lw/0VWTLYHKJPm+5zDM=\nAllowedIPs = 10.99.99.4/32\nPersistentKeepAlive = 25\n")])])]),a("p",[e._v("Ahora ya podemos reiniciar el servicio en el servidor:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg-quick down wg0\n\nwg-quick up wg0\n")])])]),a("p",[e._v("En este momento podemos ver que están conectados los 3 peers que hemos añadido (tras iniciar el túnel en el dispositivo android o iOS):")]),e._v(" "),a("p",[e._v("Ahora ya podemos realizar las pruebas de funcionamiento (nos hemos instalado una aplicación llamada iNetTools para ejecutar los comandos adecuados):")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Ping y traceroute desde el cliente android a la red interna:")])]),e._v(" "),a("li",[a("p",[e._v("Ping y traceroute desde el cliente interno a la interfaz del túnel en el cliente windows:")])])]),e._v(" "),a("p",[e._v("(Sin terminar)")]),e._v(" "),a("h3",{attrs:{id:"comparativa-con-openvpn-apartado-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparativa-con-openvpn-apartado-a"}},[e._v("#")]),e._v(" Comparativa con OpenVPN (Apartado A)")]),e._v(" "),a("p",[e._v("Después de configurar el acceso remoto con OpenVPN y Wireguard, he descubierto que Wireguard es superior en varios aspectos. En primer lugar, se ha demostrado que es más rápido que OpenVPN en pruebas realizadas en máquinas virtuales. Esto podría mejorar significativamente la experiencia del usuario en un entorno real. Además, la configuración de Wireguard es más sencilla y se comparte de manera similar en todos los clientes, independientemente del sistema operativo utilizado. Finalmente, Wireguard no requiere la creación de una autoridad certificadora, lo que es una ventaja adicional.")]),e._v(" "),a("h2",{attrs:{id:"d-vpn-sitio-a-sitio-con-wireguard-10-puntos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#d-vpn-sitio-a-sitio-con-wireguard-10-puntos"}},[e._v("#")]),e._v(" D) VPN sitio a sitio con WireGuard (10 puntos)")]),e._v(" "),a("p",[a("strong",[e._v("Configura una VPN sitio a sitio usando WireGuard. Documenta el proceso adecuadamente y compáralo con el del apartado B.")])]),e._v(" "),a("p",[e._v("De forma similar a como lo hicimos con OpenVPN, vamos a crear un entorno de prueba utilizando el mismo archivo "),a("a",{attrs:{href:"https://pastebin.com/xrPNkVJt",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vagrantfile"),a("OutboundLink")],1),e._v(" del segundo apartado. Una vez establecido el entorno, debemos configurar adecuadamente las máquinas para usar Wireguard.")]),e._v(" "),a("p",[e._v("Para comenzar, debemos modificar la ruta predeterminada en ambos clientes. Si no se realizó en Vagrant, este paso no sería necesario.")]),e._v(" "),a("p",[e._v("En el cliente del escenario 1:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ip r del default\nsudo ip r add default via 30.0.0.10\n")])])]),a("p",[e._v("En el cliente del escenario 2:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo ip r del default\nsudo ip r add default via 20.0.0.10\n")])])]),a("p",[e._v("Una vez configuradas las rutas en los clientes, procedemos a configurar las máquinas que actuarán como servidor y cliente de Wireguard.")]),e._v(" "),a("p",[e._v("En la máquina “Servidor1” del escenario 1 instalamos en primer lugar wireguard:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo apt install wireguard\n")])])]),a("p",[e._v("A continuación activamos el bit de forwarding y hacemos esta configuración permanente:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("echo 1 > sudo /proc/sys/net/ipv4/ip_forward\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo nano /etc/sysctl.conf                                          \n\nnet.ipv4.ip_forward=1\n")])])]),a("p",[e._v("Después, al igual que hicimos antes, tenemos que generar el par de claves:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cd /etc/wireguard\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg genkey | tee serverprivatekey | wg pubkey > serverpublickey\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cat serverprivatekey\n\ncC+ti1+R0GaTwEjYF1FYtENEnJcsUWhIuwM1JDxhA0g=\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cat serverpublickey\n\nSsXvBbNfZ+TosuxjIy9bzYQYAPnbr1gmdvnn3RcR53s=\n")])])]),a("p",[e._v("Ahora ya podemos crear el fichero de configuración, que será muy parecido al que creamos en el apartado anterior:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nano wg0.conf\n\n# Server config\n[Interface]\nAddress = 10.99.99.1\nPrivateKey = cC+ti1+R0GaTwEjYF1FYtENEnJcsUWhIuwM1JDxhA0g=\nListenPort = 51820\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n")])])]),a("p",[e._v("En este momento, ya podemos probar a iniciar el servicio:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg-quick up wg0\n")])])]),a("p",[e._v("Podemos ver que el servicio se ha iniciado correctamente:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg\n")])])]),a("p",[a("img",{attrs:{src:s(1100),alt:"image"}})]),e._v(" "),a("p",[e._v('Una vez que hemos configurado las rutas, debemos proceder a configurar la máquina "Servidor2" como cliente de Wireguard en el escenario 2. Primero, debemos instalar Wireguard en esa máquina.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo apt install wireguard\n")])])]),a("p",[e._v("Y activamos el bit de forwarding, haciéndolo permanente:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("echo 1 > sudo /proc/sys/net/ipv4/ip_forward\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("sudo nano /etc/sysctl.conf                                          \n\nnet.ipv4.ip_forward=1\n")])])]),a("p",[e._v("Generaremos el par de claves que usará esta máquina:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cd /etc/wireguard\n\nwg genkey | tee clientprivatekey | wg pubkey > clientpublickey\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cat clientprivatekey\n\nOLjGjIFwJYNa2FKWYjpcmjDlBXjyQDuf5IBxvc0HNV4=\n")])])]),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("cat clientpublickey\n\nt6xa/d6mLIRK1vqbjM1zgF/K7iUz2SeoDrAIz6hWtSk=\n")])])]),a("p",[e._v('Ahora debemos configurar la máquina "Servidor2" para que actúe como cliente de Wireguard en el escenario 2. Así que en primer lugar, instalamos Wireguard en esa máquina y luego creamos el archivo de configuración que utilizará, también agregando el bloque "Peer" tal como lo hicimos en el paso anterior.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nano wg0.conf\n\n[Interface]\nAddress = 10.99.99.2\nPrivateKey = 2IZ8qGagupYbFsWBQjLVCkmNCuuRrlIp+ScliSIyTnE=\nListenPort = 51820\n\n[Peer]\nPublicKey = 4dAlX0YhNeSWdEmVEiB779cOECpryHWLFhx1rEnuPmA=\nAllowedIPs = 10.99.99.1/32, 30.0.0.0/24\nEndpoint = 192.168.121.183:51820\n")])])]),a("p",[e._v('Para activar el servicio de Wireguard, es necesario añadir un bloque "Peer" en el fichero de configuración del escenario 1 antes de iniciar el servicio.')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("nano wg0.conf\n\n# Server config\n[Interface]\nAddress = 10.99.99.1\nPrivateKey = cHi1Gnj0aP82bNUJ9mp+3rMClVzvnCt1128uTaHk+mQ=\nListenPort = 51820\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# Cliente Escenario 2\n[Peer]\nPublickey = h3gPs1hb/csc0+QEAtPohrR/RrsAfKNNsI6HSaki61I=\nAllowedIPs = 10.99.99.2/32, 20.0.0.0/24\nPersistentKeepAlive = 25\n")])])]),a("p",[e._v("Ahora reiniciamos el servicio en la máquina “Servidor1” del escenario 1:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg-quick down wg0\n\nwg-quick up wg0\n")])])]),a("p",[e._v("Ya podemos iniciar el servicio en el escenario 2:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("wg-quick up wg0\n")])])]),a("p",[e._v("Y podemos ver que se han establecido la conexión:")]),e._v(" "),a("p",[a("img",{attrs:{src:s(1101),alt:"image"}})]),e._v(" "),a("p",[e._v("Ahora ya podemos realizar las pruebas necesarias:")]),e._v(" "),a("ul",[a("li",[e._v("Rutas en la máquina “Servidor1” del escenario 1:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1102),alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("Ping y traceroute desde el cliente del escenario 1 al cliente del escenario 2:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1103),alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("Rutas en la máquina “Servidor2” del escenario 2:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1104),alt:"image"}})]),e._v(" "),a("ul",[a("li",[e._v("Ping y traceroute desde el cliente del escenario 2 al cliente del escenario 1:")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(1105),alt:"image"}})]),e._v(" "),a("h3",{attrs:{id:"comparativa-con-openvpn-apartado-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparativa-con-openvpn-apartado-b"}},[e._v("#")]),e._v(" Comparativa con OpenVPN (Apartado B)")]),e._v(" "),a("p",[e._v("Después de configurar el site to site con OpenVPN y Wireguard, me he dado cuenta de que Wireguard es superior a OpenVPN en varios aspectos, tal como sucedió con el acceso remoto. En primer lugar, la configuración de Wireguard es mucho más sencilla y rápida en comparación con OpenVPN, con una sintaxis más fácil de entender. Aunque no he podido comprobarlo en profundidad en un entorno de máquinas virtuales, he notado una mayor velocidad al realizar pruebas y establecer conexiones con Wireguard. Además, sigue siendo cómodo de configurar ya que no se requiere crear una autoridad certificadora.")]),e._v(" "),a("h3",{attrs:{id:"extra-1-vpn-de-acceso-remoto-con-ipsec-5-puntos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extra-1-vpn-de-acceso-remoto-con-ipsec-5-puntos"}},[e._v("#")]),e._v(" Extra 1) VPN de acceso remoto con Ipsec (5 puntos)")]),e._v(" "),a("p",[a("strong",[e._v("Elige una aplicación por software (por ejemplo, FreeS/Wan) y monta la configuración. Documenta el proceso detalladamente.")])]),e._v(" "),a("h3",{attrs:{id:"extra-2-vpn-sitio-a-sitio-con-ipsec-10-puntos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extra-2-vpn-sitio-a-sitio-con-ipsec-10-puntos"}},[e._v("#")]),e._v(" Extra 2) VPN sitio a sitio con IPsec (10 puntos)")]),e._v(" "),a("p",[a("strong",[e._v("Montando el escenario en GNS3 usando routers CISCO o con una aplicación por software (por ejemplo, FreeS/Wan) despliega la configuración solicitada. Documenta el proceso detalladamente.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);